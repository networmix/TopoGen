{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TopoGen","text":"<p>TopoGen builds realistic backbone graphs for the continental US and prepares analysis-ready scenarios for <code>NetGraph</code>.</p>"},{"location":"#what-it-does","title":"What it does","text":"<ul> <li>Generator: Constructs an integrated metro + highway graph from public datasets.</li> <li>Builder: Converts the integrated graph into a <code>NetGraph</code> scenario YAML for analysis.</li> <li>Traffic: Supports <code>uniform</code>, <code>gravity</code>, and <code>hose</code> models. Hose can emit multiple sampled matrices (deterministic given <code>output.scenario_seed</code>).</li> </ul>"},{"location":"#how-it-creates-realistic-graphs","title":"How it creates realistic graphs","text":"<ul> <li>Uses Census Urban Areas (UAC20) to delineate metro regions and TIGER/Line primary roads for the backbone substrate.</li> <li>Projects to an equal-area CRS (EPSG:5070), snaps nearby nodes, removes invalid geometry, and keeps the largest connected component.</li> <li>Connects nearby metros via a k-nearest adjacency and computes highway-constrained paths to approximate long-haul corridors.</li> <li>Validates connectivity and distance constraints, assigns risk groups, and attaches component blueprints before emitting YAML.</li> <li>Validates connectivity and distance constraints, assigns risk groups, and attaches component blueprints before emitting YAML. YAML anchors can be disabled via <code>output.formatting.yaml_anchors: false</code> if you prefer expanded lists.</li> </ul>"},{"location":"#quick-start","title":"Quick start","text":"<pre><code># Inspect configuration and data availability\npython -m topogen info config.yml\n\n# Generate the integrated metro + highway graph\npython -m topogen generate config.yml\n\n# Build a NetGraph scenario YAML from the integrated graph\npython -m topogen build config.yml -o config_scenario.yml\n</code></pre> <p>See the Installation guide for setup and the CLI Reference for commands and options.</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.11 or later</li> <li>pip package manager</li> </ul>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>Clone the repository and install in development mode:</p> <pre><code>git clone https://github.com/networmix/TopoGen.git\ncd TopoGen\nmake dev\n</code></pre> <p>This will install the package in editable mode with all development dependencies.</p>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>Test that TopoGen is installed correctly:</p> <pre><code>python -m topogen --help\n</code></pre>"},{"location":"reference/cli/","title":"CLI Reference","text":"<p>TopoGen exposes subcommands for generating the integrated graph, building a <code>NetGraph</code> scenario, and inspecting configuration.</p>"},{"location":"reference/cli/#usage","title":"Usage","text":"<pre><code>python -m topogen [GLOBAL OPTIONS] &lt;command&gt; [COMMAND OPTIONS]\n</code></pre>"},{"location":"reference/cli/#global-options","title":"Global options","text":"<ul> <li><code>-v, --verbose</code>: Enable debug logging.</li> <li><code>--quiet</code>: Suppress console prints (log output only).</li> </ul>"},{"location":"reference/cli/#commands","title":"Commands","text":""},{"location":"reference/cli/#info","title":"<code>info</code>","text":"<p>Show configuration values and input data availability.</p> <pre><code>python -m topogen info config.yml\n</code></pre> <p>Options:</p> <p>Positional config path (default: <code>config.yml</code>)</p>"},{"location":"reference/cli/#generate","title":"<code>generate</code>","text":"<p>Generate the integrated metro + highway graph to <code>&lt;config_stem&gt;_integrated_graph.json</code> in the current directory.</p> <pre><code>python -m topogen generate config.yml\n</code></pre> <p>Options:</p> <p>Positional config path (default: <code>config.yml</code>)</p>"},{"location":"reference/cli/#build","title":"<code>build</code>","text":"<p>Build a <code>NetGraph</code> scenario YAML from the integrated graph.</p> <pre><code>python -m topogen build config.yml -o config_scenario.yml\n</code></pre> <p>Options:</p> <p>Positional config path (default: <code>config.yml</code>)</p> <ul> <li><code>-o, --output PATH</code> (default: <code>&lt;config_stem&gt;_scenario.yml</code> in CWD)</li> <li><code>--print</code> Print the YAML to stdout instead of writing to a file and validating</li> </ul>"},{"location":"reference/cli/#notes","title":"Notes","text":"<ul> <li>Configuration lives in <code>config.yml</code>. See the repository root for an example and <code>docs/</code> for details.</li> <li>YAML formatting: set <code>output.formatting.yaml_anchors: false</code> to emit fully expanded YAML without anchors/aliases.</li> </ul>"},{"location":"reference/validation/","title":"Validation","text":""},{"location":"reference/validation/#validation-subsystem","title":"Validation subsystem","text":"<p>TopoGen performs two layers of validation for generated NetGraph scenarios:</p> <ul> <li>Intra-scenario checks on the raw YAML/dict (no <code>ngraph</code> dependency).</li> <li>Optional <code>ngraph</code>-powered schema and audit checks on the expanded network.</li> </ul>"},{"location":"reference/validation/#api","title":"API","text":"<pre><code>from topogen.validation import validate_scenario_yaml, validate_scenario_dict\n</code></pre> <ul> <li><code>validate_scenario_dict(data, ig_coords=None) -&gt; list[str]</code></li> <li> <p>Fast checks on the parsed YAML dict: metro PoP/DC attribute consistency, required DC attributes, workflow references to traffic matrices and failure policies, isolation hints, and DC adjacency capacity vs traffic demand.</p> </li> <li> <p><code>validate_scenario_yaml(scenario_yaml, integrated_graph_path=None, run_ngraph=True) -&gt; list[str]</code></p> </li> <li>Parses YAML, runs <code>validate_scenario_dict</code>, optionally loads the integrated graph for metro coordinate cross-check, and then runs <code>ngraph</code> audits if enabled.</li> </ul>"},{"location":"reference/validation/#audits-ngraph","title":"Audits (ngraph)","text":"<p>The audit pipeline runs:</p> <ol> <li>Schema and isolation via <code>ngraph.scenario.Scenario</code>.</li> <li>Expansion checks: groups and scenario/blueprint adjacency must expand to nodes/links.</li> <li>Node role presence.</li> <li>Node hardware presence and basic validity against <code>components.hw_component</code> and component library.</li> <li>Link optics mapping and blueprint hardware presence/capacity checks.</li> <li>Platform port budget vs optics modules required.</li> </ol> <p>All functions return human-readable issue strings. An empty list indicates no detected issues.</p>"},{"location":"reference/validation/#where-validation-runs","title":"Where validation runs","text":"<ul> <li>The scenario pipeline (<code>topogen.scenario.assembly.build_scenario</code>) focuses on construction and does not validate.</li> <li>The CLI <code>build</code> command validates after writing the scenario YAML using <code>validate_scenario_yaml</code> with the integrated graph path and <code>run_ngraph=True</code>.</li> </ul>"}]}