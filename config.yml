# TopologyGenerator Configuration

# Data Sources
# Input data files used for topology generation

data_sources:
  # Census 2020 Urban Areas (UAC20) - defines urban area boundaries for metro clustering
  uac_polygons: "data/tl_2020_us_uac20.zip"

  # TIGER/Line primary roads - highway network backbone data
  tiger_roads: "data/tl_2024_us_primaryroads.zip"

  # CONUS boundary shapefile - used for visualization bounds (Census state boundaries)
  conus_boundary: "data/cb_2024_us_state_500k.zip"

# Processing Parameters

# Geographic projection settings
projection:
  # Target CRS for all spatial operations (EPSG:5070 = US Albers Equal Area - optimal for CONUS)
  target_crs: "EPSG:5070"

# Metro clustering configuration
clustering:
  # Target number of metro clusters to generate
  metro_clusters: 25

  # Maximum radius for filtering UAC urban areas (kilometers) - excludes oversized metro areas
  max_uac_radius_km: 100.0

  # Export cluster visualization files (JPEG + simplified GeoJSON) - used in metro_clusters.py
  export_clusters: true

  # Export integrated graph visualization (metro clusters + corridors) - used in integrated_graph.py
  export_integrated_graph: true

  # Metro clusters to force include regardless of size ranking
  # Uses partial name matches (case-insensitive) for strategic network connectivity
  override_metro_clusters:
    - "Denver" # Bridge Plains to Rockies via I-70/I-25 hub
    - "Minneapolis" # Bridge Upper Midwest to Plains via I-94/I-35 hub
    - "Salt Lake City" # Bridge CA to Rockies via I-80/I-15 hub
    - "Las Vegas" # Bridge CA to Rockies via I-15 corridor
    - "Phoenix" # Bridge CA to Southwest via I-10 corridor
    - "Atlanta" # Bridge FL to Southeast via I-75/I-85 hub
    - "Portland" # Bridge WA to CA via I-5 corridor
    - "Omaha" # Bridge Upper Plains to Rockies via I-80/I-29 hub
    - "Boise" # Bridge PNW to Rockies via I-84/I-15 hub
    - "Albuquerque" # Bridge CA to TX via I-40/I-25 hub
    - "New Orleans" # Bridge TX to Southeast via I-10/I-55 hub
    - "Buffalo" # Bridge Northeast to Midwest via I-90/I-79 corridor
    - "Chicago" # Bridge Great Lakes to Plains via I-90/I-55 hub
    - "Dallas" # Bridge Plains to Gulf via I-35/I-20 hub
    - "Kansas City" # Bridge Plains to Midwest via I-70/I-35 hub
    - "St. Louis" # Bridge Midwest to South via I-70/I-55 hub
    - "Charlotte" # Bridge Southeast to Northeast via I-85/I-77 hub
    - "Nashville" # Bridge South to Midwest via I-40/I-65 hub
    - "Pittsburgh" # Bridge Northeast to Midwest via I-76/I-79 hub
    - "Sacramento" # Bridge Northern CA to Rockies via I-80 corridor

  # Numeric precision for coordinate and area values
  coordinate_precision: 1 # Decimal places for rounding coordinates in output
  area_precision: 2 # Decimal places for areas and radii in calculations

# Highway graph processing configuration
highway_processing:
  # Minimum edge length filter (kilometers) - set to 0.0 to preserve connectivity
  min_edge_length_km: 0.0

  # Grid snap precision (meters) - tolerance for merging nearby nodes
  snap_precision_m: 150.0

  # TIGER highway classes to include (S1100 = Primary roads, S1200 = Secondary roads)
  highway_classes: ["S1100"] # Primary roads only for backbone network

  # Minimum nodes required in cycle before edge contraction optimization
  min_cycle_nodes: 3

  # Keep only largest connected component if highway graph is disconnected
  filter_largest_component: true

  # Sample size for edge validation performance - number of edges to validate
  validation_sample_size: 5

# Corridor discovery between metro areas
corridors:
  # Maximum paths to find between each adjacent metro pair (reduced for performance)
  k_paths: 1

  # Number of nearest neighbors per metro for building adjacency graph
  k_nearest: 6

  # Maximum distance for considering metros as adjacent (kilometers)
  max_edge_km: 1000.0

  # Skip corridor path finding for metro pairs farther than this distance (kilometers)
  max_corridor_distance_km: 1000.0

  # Risk groups configuration for corridor edges
  risk_groups:
    # Enable risk group assignment for corridor edges
    enabled: true

    # Prefix for generated risk group names
    group_prefix: "corridor_risk"

    # Exclude highway segments within metro radius from risk groups to avoid shared risk
    exclude_metro_radius_shared: true

# Graph validation parameters
validation:
  # Maximum allowed distance from metro centroid to nearest highway node (kilometers)
  max_metro_highway_distance_km:
    50.0

    # Require final highway graph to be connected (used in corridor validation)
  require_connected: true

  # Node degree thresholds for graph quality validation
  max_degree_threshold: 1000 # Fail validation if any node exceeds this degree
  high_degree_warning: 20 # Log warning for nodes exceeding this degree

  # Graph component validation for connectivity analysis
  min_largest_component_fraction: 0.5 # Fails if sliver removal causes largest component to drop below 50% OR if corridor graph's largest component is below 50%

# Output configuration
output:
  # NetGraph scenario metadata
  scenario_metadata:
    title: "Continental US Backbone Topology"
    description: "Generated backbone topology based on population density and highway infrastructure"
    version: "1.0"

  # Data formatting configuration
  formatting:
    json_indent: 2 # JSON output indentation

# Build configuration for generating NetGraph scenarios
build:
  # Default settings for topology generation
  build_defaults:
    pop_per_metro: 2 # Default number of PoP sites per metro area
    site_blueprint: SingleRouter # Default blueprint for each PoP site
    dc_regions_per_metro: 2 # Default number of DC Regions per metro area
    dc_region_blueprint: DCRegion # Default blueprint for each DC Region

  # Per-metro overrides (key must match metro.name from metro_clusters)
  build_overrides:
    # Example overrides for specific metros (use full metro names)
    "Denver--Aurora, CO":
      pop_per_metro: 4
      site_blueprint: Clos_64_256
    "Salt Lake City, UT":
      site_blueprint: FullMesh4

# Component library and assignment configuration
components:
  # Component library definitions (can extend or override built-ins)
  library:
    # Example custom component - uncomment to override built-in
    # CustomSpineChassis:
    #   component_type: chassis
    #   description: "Custom spine router chassis"
    #   cost: 75000.0
    #   power_watts: 3000.0
    #   power_watts_max: 3500.0
    #   capacity: 102400.0  # Gbps
    #   ports: 64
    #   attrs:
    #     vendor: "Custom Corp"
    #     model: "CS-12000"

  # Component assignments to blueprint roles
  assignments:
    # Map blueprint roles to hardware components
    spine:
      hw_component: SpineChassis
      optics: 400G-LR4 # Default optics for spine links
    leaf:
      hw_component: LeafChassis
      optics: 400G-SR8
    core:
      hw_component: CoreRouter
      optics: 100G-LR4
    dc:
      hw_component: DCNode
      optics: 100G-LR4

    # Per-blueprint overrides (optional)
    blueprint_overrides:
      Clos_64_256:
        spine:
          hw_component: HighEndSpineChassis
          optics: 400G-LR4
        leaf:
          hw_component: HighEndLeafChassis
          optics: 400G-SR8
      SingleRouter:
        core:
          hw_component: EdgeRouter
          optics: 100G-LR4

# Failure policy configuration
failure_policies:
  # Built-in and custom failure policy library
  library:
    # Example custom failure policy - uncomment to override built-in
    # custom_single_link_failure:
    #   attrs:
    #     description: "Custom single random link failure policy"
    #   rules:
    #     - entity_scope: "link"
    #       rule_type: "choice"
    #       count: 1

  # Assignment configuration for failure policies
  assignments:
    # Default failure policy to use
    default: "single_random_link_failure"

    # Per-scenario overrides (optional)
    scenario_overrides: {}

# Workflow configuration
workflows:
  # Built-in and custom workflow library
  library:
    # Example custom workflow - uncomment to override built-in
    # custom_basic_analysis:
    #   - step_type: NetworkStats
    #     name: "network_statistics"
    #   - step_type: CapacityProbe
    #     name: "capacity_probe"
    #     source_path: "^(core_.+)"
    #     sink_path: "^(core_.+)"
    #     mode: "pairwise"

  # Assignment configuration for workflows
  assignments:
    # Default workflow to use
    default: "basic_capacity_analysis"

    # Per-scenario overrides (optional)
    scenario_overrides: {}
